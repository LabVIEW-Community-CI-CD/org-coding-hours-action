name: "Org Coding Hours"
description: >
  Composite action to compute coding hours across multiple repositories using
  git‑hours, aggregate the results, build a KPI website, and publish both the
  metrics reports and website to dedicated branches.

inputs:
  repos:
    description: Space‑separated list of GitHub repositories in owner/name format.
    required: true
  window_start:
    description: Optional start date in YYYY‑MM‑DD format for the report window.
    required: false
  metrics_branch:
    description: Branch to which the metrics JSON reports will be committed.
    default: metrics
    required: false
  pages_branch:
    description: Branch to which the generated KPI site will be committed (for GitHub Pages).
    default: gh-pages
    required: false

runs:
  using: "composite"
  steps:
    # Ensure we have the repository checked out so that git operations and script files are available.
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    # Install Go for git-hours. Always use version 1.24 to match the git-hours v0.1.2 requirement.
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    # Install the specific git-hours release (v0.1.2) by cloning and go installing it.
    - name: Install git-hours v0.1.2
      run: |
        git clone --depth 1 --branch v0.1.2 https://github.com/trinhminhtriet/git-hours.git git-hours-src
        # The module declares Go 1.24.1; adjust it to 1.24 for compatibility.
        sed -i 's/go 1.24.1/go 1.24/' git-hours-src/go.mod
        (cd git-hours-src && go install .)
      shell: bash
    # Setup Python for running our helper scripts. The default Python version available on the runner is sufficient.
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    # Run the org coding hours script which clones each repository, runs git-hours, aggregates results,
    # and writes per‑repository and aggregated JSON files into a reports/ directory.
    - name: Compute org coding hours
      run: |
        python3 "${{ github.action_path }}/scripts/org_coding_hours.py"
      env:
        REPOS: ${{ inputs.repos }}
        WINDOW_START: ${{ inputs.window_start }}
      shell: bash
    # Build a simple KPI website from the aggregated report. The generated site will live in the site/ directory.
    - name: Build KPI website
      run: |
        python3 "${{ github.action_path }}/scripts/build_site.py"
      shell: bash
    # Commit and push the JSON reports to the metrics branch.
    - name: Publish metrics reports
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        set -e
        git config --global user.name "git-hours bot"
        git config --global user.email "bot@github.com"
        # Stash any untracked changes (reports/site) before switching branches.
        git stash push --include-untracked --quiet
        # Fetch the target metrics branch if it exists.
        git fetch origin "${{ inputs.metrics_branch }}" || true
        # Switch to the metrics branch, creating it if necessary.
        if git show-ref --quiet refs/remotes/origin/"${{ inputs.metrics_branch }}"; then
          git switch --quiet "${{ inputs.metrics_branch }}" || git switch -c "${{ inputs.metrics_branch }}" origin/"${{ inputs.metrics_branch }}"
          git pull --ff-only origin "${{ inputs.metrics_branch }}" || true
        else
          git switch --orphan "${{ inputs.metrics_branch }}"
          git reset --hard
        fi
        # Restore stashed reports.
        git stash pop --quiet || true
        # Add the reports directory and commit if there are changes.
        git add reports
        git commit -m "chore(metrics): org report $(date +%F)" || echo "No metrics changes to commit"
        # Push the metrics branch using the provided token.
        git push https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY} "${{ inputs.metrics_branch }}" \
          || git push --force-with-lease https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY} "${{ inputs.metrics_branch }}"
      shell: bash
    # Commit and push the KPI site to the pages branch, enabling GitHub Pages publication.
    - name: Publish KPI website
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        set -e
        git config --global user.name "git-hours bot"
        git config --global user.email "bot@github.com"
        git stash push --include-untracked --quiet
        git fetch origin "${{ inputs.pages_branch }}" || true
        if git show-ref --quiet refs/remotes/origin/"${{ inputs.pages_branch }}"; then
          git switch --quiet "${{ inputs.pages_branch }}" || git switch -c "${{ inputs.pages_branch }}" origin/"${{ inputs.pages_branch }}"
          git pull --ff-only origin "${{ inputs.pages_branch }}" || true
        else
          git switch --orphan "${{ inputs.pages_branch }}"
          git reset --hard
        fi
        git stash pop --quiet || true
        # Add the site directory and commit updates.
        git add site
        git commit -m "chore(metrics): update KPI site $(date +%F)" || echo "No site changes to commit"
        git push https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY} "${{ inputs.pages_branch }}" \
          || git push --force-with-lease https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY} "${{ inputs.pages_branch }}"
      shell: bash