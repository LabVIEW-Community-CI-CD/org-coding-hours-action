name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  docker-action:
    runs-on: ubuntu-latest
    name: Run Docker action on sample repo
    steps:
      - uses: actions/checkout@v4
      - name: Publish CLI
        run: dotnet publish OrgCodingHoursCLI/OrgCodingHoursCLI.csproj -c Release
      - name: Execute action against Hello-World
        uses: ./
        with:
          repos: octocat/Hello-World

  pester-tests:
    runs-on: ubuntu-latest
    name: Run Pester tests for CLI
    steps:
      - uses: actions/checkout@v4
      - name: Publish CLI
        run: dotnet publish OrgCodingHoursCLI/OrgCodingHoursCLI.csproj -c Release
      - name: Run unit tests
        run: dotnet test OrgCodingHoursCLI.Tests/OrgCodingHoursCLI.Tests.csproj
      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: tools/Modules
          key: ${{ runner.os }}-psmodules-pester-5.5.0
      - name: Install Pester
        shell: pwsh
        run: |
          $modulePath = Join-Path $PWD 'tools/Modules'
          if (-not (Test-Path (Join-Path $modulePath 'Pester' '5.5.0'))) {
            Save-Module -Name Pester -RequiredVersion 5.5.0 -Path $modulePath -Force
          }
          $env:PSModulePath = "$modulePath" + [IO.Path]::PathSeparator + $env:PSModulePath
          "PSModulePath=$env:PSModulePath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Upload Pester module
        uses: actions/upload-artifact@v4
        with:
          name: pester-module
          path: tools/Modules/Pester/5.5.0
      - name: Run Pester tests
        shell: pwsh
        run: |
          Invoke-Pester

  build_cli:
    runs-on: ubuntu-latest
    name: Build and test CLI
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Extract version
        run: echo "CLI_VERSION=$(grep -oP '(?<=<Version>).*?(?=</Version>)' version.props)" >> $GITHUB_ENV
      - name: Restore
        run: dotnet restore OrgCodingHoursCLI/OrgCodingHoursCLI.csproj
      - name: Build
        run: dotnet build OrgCodingHoursCLI/OrgCodingHoursCLI.csproj -c Release --no-restore
      - name: Run unit tests
        run: dotnet test OrgCodingHoursCLI.Tests/OrgCodingHoursCLI.Tests.csproj
      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: tools/Modules
          key: ${{ runner.os }}-psmodules-pester-5.5.0
      - name: Install Pester
        shell: pwsh
        run: |
          $modulePath = Join-Path $PWD 'tools/Modules'
          if (-not (Test-Path (Join-Path $modulePath 'Pester' '5.5.0'))) {
            Save-Module -Name Pester -RequiredVersion 5.5.0 -Path $modulePath -Force
          }
          $env:PSModulePath = "$modulePath" + [IO.Path]::PathSeparator + $env:PSModulePath
          "PSModulePath=$env:PSModulePath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Upload Pester module
        uses: actions/upload-artifact@v4
        with:
          name: pester-module
          path: tools/Modules/Pester/5.5.0
      - name: Run Pester tests
        shell: pwsh
        run: |
          Invoke-Pester
      - name: Pack CLI
        run: dotnet pack OrgCodingHoursCLI/OrgCodingHoursCLI.csproj -c Release -o ./artifacts /p:Version=${CLI_VERSION}
      - name: Build Docker image
        run: docker build --build-arg CLI_VERSION=${CLI_VERSION} -t org-coding-hours-action:${CLI_VERSION} .
      - name: Tag release
        if: github.ref == 'refs/heads/main'
        run: |
          git tag v${CLI_VERSION}
          git push origin v${CLI_VERSION}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: OrgCodingHoursCLI
          path: ./artifacts
