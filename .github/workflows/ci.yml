name: CI

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]
  workflow_call:

permissions:
  contents: write

jobs:
  docker-action:
    runs-on: ubuntu-latest
    name: Run Docker action on sample repo
    steps:
      - uses: actions/checkout@v4
      - name: Fetch git
        run: ./scripts/fetch-git.sh
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.302'
      - name: Restore
        run: dotnet restore OrgCodingHoursCLI/OrgCodingHoursCLI.csproj --locked-mode
      - name: Pack CLI
        run: dotnet pack OrgCodingHoursCLI/OrgCodingHoursCLI.csproj -c Release -o package --no-restore
      - name: Execute action against sample repos
        uses: ./
        with:
          repos: ni/labview-icon-editor ni/open-source

  pester-tests:
    runs-on: ubuntu-latest
    name: Run Pester tests for CLI
    steps:
      - uses: actions/checkout@v4
      - name: Fetch git
        run: ./scripts/fetch-git.sh
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.302'
      - name: Restore
        run: |
          dotnet restore OrgCodingHoursCLI/OrgCodingHoursCLI.csproj --locked-mode
          dotnet restore OrgCodingHoursCLI.Tests/OrgCodingHoursCLI.Tests.csproj --locked-mode
      - name: Fetch git
        run: ./scripts/fetch-git.sh
      - name: Publish CLI
        run: dotnet publish OrgCodingHoursCLI/OrgCodingHoursCLI.csproj -c Release --no-restore
      - name: Run unit tests
        run: dotnet test OrgCodingHoursCLI.Tests/OrgCodingHoursCLI.Tests.csproj --no-restore
      - name: Fetch git
        run: ./scripts/fetch-git.sh
      - name: Pack CLI
        run: dotnet pack OrgCodingHoursCLI/OrgCodingHoursCLI.csproj -c Release -o package --no-restore
      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: tools/Modules
          key: ${{ runner.os }}-psmodules-pester-5.5.0
      - name: Install Pester
        shell: pwsh
        run: |
          $modulePath = Join-Path $PWD 'tools/Modules'
          if (-not (Test-Path (Join-Path $modulePath 'Pester' '5.5.0'))) {
            Save-Module -Name Pester -RequiredVersion 5.5.0 -Path $modulePath -Force
          }
          $env:PSModulePath = "$modulePath" + [IO.Path]::PathSeparator + $env:PSModulePath
          "PSModulePath=$env:PSModulePath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Upload Pester module
        uses: actions/upload-artifact@v4
        with:
          name: pester-module
          path: tools/Modules/Pester/5.5.0
      - name: Run Pester tests
        shell: pwsh
        run: |
          Invoke-Pester

  build_cli:
    name: Build and test CLI
    uses: ./.github/workflows/build-cli.yml

  docker_build:
    runs-on: ubuntu-latest
    needs: build_cli
    permissions:
      contents: read
      packages: write
    name: Build Docker image
    steps:
      - uses: actions/checkout@v4
      - name: Download CLI artifact
        uses: actions/download-artifact@v4
        with:
          name: cli-package
          path: package
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set lowercase repository name
        run: echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            CLI_VERSION=${{ needs.build_cli.outputs.cli_version }}
          tags: |
            ghcr.io/${{ env.REPO_LC }}:${{ needs.build_cli.outputs.cli_version }}
            ghcr.io/${{ env.REPO_LC }}:${{ github.sha }}
