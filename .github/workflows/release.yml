name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  build_cli:
    uses: ./.github/workflows/build-cli.yml
    secrets: inherit

  publish_cli:
    needs: build_cli
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Fetch git
        run: ./scripts/fetch-git.sh
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.302'
      - name: Restore
        run: dotnet restore OrgCodingHoursCLI/OrgCodingHoursCLI.csproj --locked-mode
      - name: Pack CLI
        run: dotnet pack OrgCodingHoursCLI/OrgCodingHoursCLI.csproj -c Release -o package -p:PackageVersion=${{ needs.build_cli.outputs.cli_version }} --no-restore
      - name: Publish package
        run: dotnet nuget push package/*.nupkg --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate

  docker:
    needs: build_cli
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set lowercase repository name
        run: echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4
        with:
          name: cli-package
          path: package
      - name: Log in to ghcr
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build image
        run: docker build --build-arg CLI_VERSION=${{ needs.build_cli.outputs.cli_version }} -t ghcr.io/$REPO_LC:${{ needs.build_cli.outputs.cli_version }} .
      - name: Push image
        run: docker push ghcr.io/$REPO_LC:${{ needs.build_cli.outputs.cli_version }}

  tag_release:
    needs: [publish_cli, docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Fetch tags
        run: git fetch --tags
      - name: Read version
        id: version
        run: |
          VERSION=$(grep -oP '(?<=<Version>)[^<]+' version.props)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Check tag
        id: check
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Create tag and release
        if: steps.check.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag "v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"
          gh release create "v${{ steps.version.outputs.version }}" --generate-notes
